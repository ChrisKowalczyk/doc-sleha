<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd" [
 <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
 <!ENTITY % entities SYSTEM "entity-decl.ent">
 %entities;
]>
<!--taroth 2010-01-27: new chapter, fate#302227-->
<!--see:  http://linux-ha.org/wiki/CTDB_%28resource_agent%29
 
 http://wiki.samba.org/index.php/CTDB_Setup
 http://ctdb.samba.org/
 http://samba.org/~tridge/sambaxp-07/ctdb.pdf
 http://wiki.samba.org/index.php/CTDB_Setup
 http://wiki.samba.org/index.php/Samba_%26_Clustering
 + innerweb link by tserong
 
 CTDB = Cluster Trivial Database
-->
<!--taroth 2010-07-26: FIXME - today's mail by tserong on devel-ha:
 I've just checked in a change to the CTDB RA:
  https://bugzilla.novell.com/show_bug.cgi?id=623788
  This makes the smb_private_dir parameter optional.  [...]
 
 For reference, the wording I've used in the RA metadata is as follows:
 
 smb_private_dir (string): Samba private dir (deprecated)
 The directory for smbd to use for storing such files as
 smbpasswd and secrets.tdb.  Old versions of CTBD (prior to 1.0.50)
 required this to be on shared storage.  This parameter should not
 be set for current versions of CTDB, and only remains in the RA
 for backwards compatibility.-->
<chapter id="cha.ha.samba">
 <title>Samba Clustering</title>
 <abstract>
  <para>
   A clustered Samba server provides a &ha; solution in your heterogeneous
   networks. This chapter explains some background information and how to
   set up a clustered Samba server.
  </para>
 </abstract>
 <sect1 id="sec.ha.samba.overview">
  <title>Conceptual Overview</title>

  <para>
   Trivial Database (TDB), has been used by Samba for many years. It allows
   multiple applications to write simultaneously. To make sure all write
   operations are successfully performed and do not collide with each other,
   TDB uses an internal locking mechanism.
  </para>

  <para>
   Cluster Trivial Database (CTDB) is a small extension of the existing TDB.
   CTDB is described by the project itself as a <quote>cluster
   implementation of the TDB database used by Samba and other projects to
   store temporary data</quote>.
  </para>

  <para>
   Each cluster node runs a local CTDB daemon. Samba communicates with its
   local CTDB daemon, instead of writing directly to its TDB. The daemons
   exchange metadata over the network, but actual write and read operations
   are done on a local copy with fast storage. The concept of CTDB is
   displayed in <xref
   linkend="fig.ha.samba.overview"/>.
  </para>

  <note>
   <title>CTDB For Samba Only</title>
   <para>
    The current implementation of the CTDB Resource Agent configures CTDB to
    only manage Samba. Everything else, including IP failover should be
    configured with Pacemaker.
   </para>
   <para>
    Furthermore, CTDB is only supported for completely homogeneous clusters.
    For example, all nodes in the cluster need to have the same
    architecture, you cannot mix i586 with x86_64.
   </para>
  </note>

  <figure id="fig.ha.samba.overview">
   <title>Structure of a CTDB Cluster</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="ha_samba.svg" width="80%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="ha_samba.png" width="80%"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   A clustered Samba server must share certain data:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Mapping table that associates Unix user and group IDs to Windows users
     and groups.
    </para>
   </listitem>
   <listitem>
    <para>
     User database must be synchronized between all nodes.
    </para>
   </listitem>
   <listitem>
    <para>
     Join information for a member server in a Windows domain must be
     available on all nodes.
    </para>
   </listitem>
   <listitem>
    <para>
     Metadata has to be available on all nodes, like active SMB sessions,
     share connections, and various locks.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   The goal is that a clustered Samba server with N+1 nodes is faster than
   with only N nodes. One node is not slower than an unclustered Samba
   server.
  </para>
 </sect1>
 <sect1 id="sec.ha.samba.basicconf">
  <title>Basic Configuration</title>

  <note>
   <title>Changed Configuration Files</title>
   <para>
    The CTDB Resource Agent automatically changes
    <filename>/etc/sysconfig/ctdb</filename> and
    <filename>/etc/samba/smb.conf</filename>. Use 
    <command>crm ra</command>&nbsp;<option>info CTDB</option> to list all parameters which can be specified
    for the CTDB resource.
   </para>
  </note>

  <para>
   To set up a clustered Samba server, proceed as follows:
  </para>

  <procedure>
   <step>
    <para>
     Prepare your cluster:
    </para>
    <substeps>
     <step>
      <para>
       Configure your cluster (&ais;, Pacemaker, OCFS2) as described in this
       guide in <xref linkend="part.config"/>.
      </para>
     </step>
     <step>
      <para>
       Configure a shared file system, like OCFS2 and mount it, for example,
       on <filename>/shared</filename>.
      </para>
     </step>
     <step>
      <para>
       If you want to turn on POSIX ACLs, enable it:
      </para>
      <itemizedlist>
       <listitem>
        <para>
         For a new OCFS2 file system use:
        </para>
<screen><command>mkfs.ocfs2</command> --fs-features=xattr ...</screen>
       </listitem>
       <listitem>
        <para>
         For an existing OCFS2 file system use:
        </para>
<screen><command>tunefs.ocfs2</command> --fs-feature=xattr<!-- 
      --> <replaceable>DEVICE</replaceable></screen>
        <para>
         Make sure the <option>acl</option> option is specified in the file
         system resource. Use the <command>crm</command> shell as follows:
        </para>
<screen>crm(live)configure# <command>primary</command> ocfs2-3<!--
      --> ocf:heartbeat:Filesystem<!--
       --> options="acl" ...</screen>
       </listitem>
      </itemizedlist>
     </step>
     <step>
      <para>
       Make sure the services
       <systemitem
       class="service">ctdb</systemitem>,
       <systemitem
        class="service">smb</systemitem>,
       <systemitem
         class="service">nmb</systemitem>, and
       <systemitem
          class="service">winbind</systemitem> are
       disabled:
      </para>
<screen><command>chkconfig</command> ctdb off
<command>chkconfig</command> smb off
<command>chkconfig</command> nmb off
<command>chkconfig</command> winbind off</screen>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Create a directory for the CTDB lock on the shared file system:
    </para>
<screen><command>mkdir</command> -p /shared/samba/</screen>
   </step>
   <step>
    <para>
     In <filename>/etc/ctdb/nodes</filename> insert all nodes which contain
     all private IP addresses of each node in the cluster:
    </para>
<screen>&subnetI;.10
&subnetI;.11</screen>
   </step>
<!--
    toms 2010-03-01: According to Tim the following step is not
    necessary anymore:
    »the CTDB RA will make these changes to smb.conf automatically 
    when CTDB is started by the cluster.«    
   -->
<!--<step>
    <para>Set the following global options in
     <filename>/etc/samba/smb.conf</filename> on all nodes:</para>
    <screen>[global]
passdb backend = tdbsam
clustering = yes
idmap backend = tdb2
private dir = /shared/samba/private
ctdb socket = /var/lib/ctdb/ctdb.socket</screen>
   </step>
   <step>
    <para>Add one or more shares to
     <filename>/etc/samba/smb.conf</filename> on all nodes:</para>
    <screen>[myshare]
path = /shared/myshare
# Other options go here, for example: read only = no</screen>
   </step>-->
   <step>
    <para>
     Add a CTDB resource to the cluster:
    </para>
<screen><command>crm</command> configure
crm(live)configure# <command>primitive</command> ctdb ocf:heartbeat:CTDB params \
    ctdb_recovery_lock="/shared/samba/ctdb.lock" \
    op monitor timeout=20 interval=10
crm(live)configure# <command>clone</command> ctdb-clone ctdb \
    meta globally-unique="false" interleave="true"
crm(live)configure# <command>colocation</command> ctdb-with-fs inf: ctdb-clone fs-clone
crm(live)configure# <command>order</command> start-ctdb-after-fs inf: fs-clone ctdb-clone
crm(live)configure# <command>commit</command></screen>
   </step>
   <step>
    <para>
     Add a clustered IP address:
    </para>
<screen>crm(live)configure# <command>primitive</command> ip ocf:heartbeat:IPaddr2<!-- 
    --> params ip=&subnetII;.222 \
  clusterip_hash="sourceip-sourceport" op monitor interval=60s
crm(live)configure# <command>clone</command> ip-clone ip meta globally-unique="true"
crm(live)configure# <command>colocation</command> ip-with-ctdb inf: ip-clone ctdb-clone
crm(live)configure# <command>order</command> start-ip-after-ctdb inf: ctdb-clone ip-clone
crm(live)configure# <command>commit</command></screen>
   </step>
   <step>
    <para>
     Check the result:
    </para>
<screen><command>crm</command> status
Clone Set: dlm-clone
     Started: [ hex-14 hex-13 ]
 Clone Set: o2cb-clone
     Started: [ hex-14 hex-13 ]
 Clone Set: c-ocfs2-3
     Started: [ hex-14 hex-13 ]
 Clone Set: ctdb-clone
     Started: [ hex-14 hex-13 ]
 Clone Set: ip-clone (unique)
     ip:0       (ocf::heartbeat:IPaddr2):       Started hex-13
     ip:1       (ocf::heartbeat:IPaddr2):       Started hex-14</screen>
   </step>
   <step>
    <para>
     Test from a client machine. On a Linux client, run the following
     command to see, if you can copy files from and to the system:
    </para>
<screen><command>smbclient</command> <option>//&subnetII;.222/myshare</option></screen>
   </step>
<!-- 
    From Tim:
    Add the IP address to the DNS at your site, so that you can access
    the share via \\hostname\sharename on Windows clients.
    => 
   -->
  </procedure>
 </sect1>
 <sect1 id="sec.ha.samba.testing">
  <title>Debugging and Testing Clustered Samba</title>

  <para>
   To debug your clustered Samba server, the following tools which operate
   on different levels are available:
  </para>

  <variablelist>
   <varlistentry>
    <term><command>ctdb_diagnostics</command>
    </term>
    <listitem>
     <para>
      Run this tool to diagnose your clustered Samba server. This gives you
      lots of debug messages which should help you track down any problems
      you might have.
     </para>
     <para>
      The <command>ctdb_diagnostics</command> command searches for the
      following files which must be available on all nodes:
     </para>
<screen>/etc/krb5.conf
/etc/hosts
/etc/ctdb/nodes
/etc/sysconfig/ctdb
/etc/resolv.conf
/etc/nsswitch.conf
/etc/sysctl.conf
/etc/samba/smb.conf
/etc/fstab
/etc/multipath.conf
/etc/pam.d/system-auth
/etc/sysconfig/nfs
/etc/exports
/etc/vsftpd/vsftpd.conf</screen>
     <para>
      If the files <filename>/etc/ctdb/public_addresses</filename> and
      <filename>/etc/ctdb/static-routes</filename> exist, they will be
      checked as well.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>ping_pong</command>
    </term>
    <listitem>
     <para>
      Check whether your file system is suitable for CTDB with
      <command>ping_pong</command>. It performs certain tests of your
      cluster file system like coherence and performance (see
      <ulink
       url="http://wiki.samba.org/index.php/Ping_pong"/>) and
      as such gives some indications on how your cluster may behave under
      high load.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   To test certain aspects of your cluster file system proceed as follows:
  </para>

  <procedure>
   <title>Test Coherence and Performance of Your Cluster File System</title>
   <step>
    <para>
     Start the command <command>ping_pong</command> on one node and replace
     the placeholder <replaceable>N</replaceable> with the amount of nodes
     plus one. The filename is available in your shared storage and is
     therefore accessible on all nodes:
    </para>
<screen><command>ping_pong</command> data.txt <replaceable>N</replaceable></screen>
    <para>
     Expect a very high locking rate as you are running only one node. If
     the program does not print a locking rate, replace your cluster file
     system.
    </para>
   </step>
   <step>
    <para>
     Start a second copy of <command>ping_pong</command> on another node
     with the same parameters.
    </para>
    <para>
     Expect to see a dramatical drop concerning the locking rate. If any of
     the following applies to your cluster file system, replace it:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <command>ping_pong</command> does not print a locking rate per second
      </para>
     </listitem>
     <listitem>
      <para>
       the locking rates in the two instances are not almost equal
      </para>
     </listitem>
     <listitem>
      <para>
       the locking rate did not drop after you have started the second
       instance
      </para>
     </listitem>
    </itemizedlist>
   </step>
   <step>
    <para>
     Start a third copy of <command>ping_pong</command>. Add another node
     and note how the locking rates change.
    </para>
   </step>
   <step>
    <para>
     Kill the <command>ping_pong</command> commands step-by-step. You should
     observe an increase of the locking rate until you get back to the
     single node case. If you did not get the expected behavior, replace
     your cluster file system.
    </para>
   </step>
  </procedure>

<!--taroth 2010-08-26: bnc#619499-->

  <note>
   <title>Joining a Domain Fails</title>
   <para>
    If the CTDB resource agent repeatedly fails upon joining a domain,
    although the CTDB cluster setup was successful and the cluster is
    running fine as standalone samba server, refer to the technical
    information document <citetitle>Joining a CTDB Cluster Into a
    Domain</citetitle>. It is available at
    <ulink
     url="http://www.novell.com/support/search.do?cmd=displayKC&amp;docType=kc&amp;externalId=7006496"
    />.
   </para>
  </note>
 </sect1>
 <sect1 id="sec.ha.samba.moreinfo">
  <title>For More Information</title>
  <remark>taroth 2011-03-09:
   http://doccomments.provo.novell.com/admin/viewcomment/16631#: It is important
   to note: "The High-Availability Linux Project utilizes a command-line tool
   called send_arp to perform the gratuitous ARP needed in their failover
   process." http://wiki.wireshark.org/Gratuitous_ARP When dealing with samba
   and a shared IP this is important to understand the fail over process to
   troubleshoot why communication is not working. Although a node may show the
   clustered ip address for samba you may not be able to ping it or connect to
   it. You can use the send arp command to test if it is something as simple as
   a arp update.</remark>
  <itemizedlist>
   <listitem>
    <para>
     <ulink url="http://linux-ha.org/wiki/CTDB_(resource_agent)"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <ulink url="http://wiki.samba.org/index.php/CTDB_Setup"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <ulink url="http://ctdb.samba.org"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <ulink url="http://wiki.samba.org/index.php/Samba_%26_Clustering"/>
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>

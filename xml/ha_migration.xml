<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd" [
 <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
 <!ENTITY % entities SYSTEM "entity-decl.ent">
 %entities;
]>
<!--taroth 091113: TODO: address https://bugzilla.novell.com/show_bug.cgi?id=548093#c29-->

<appendix id="cha.ha.migration">
 <title>Upgrading Your Cluster to the Latest Product Version</title>
 <para>If you have an existing cluster based on &slsreg; 10, you can update
  your cluster to run with the &hasi; on &sls; 11 or &productnumber;. </para>
 
 <para>For migrating from &sls; 10 to &sls; 11 or &productnumber;,
  all cluster nodes must be offline and the cluster must be migrated as a
  whole&mdash;mixed clusters running on &sls; 10/&sls; 11 are not
  supported. </para>
 
 <sect1 id="sec.ha.migration.sle11">
  <title>Upgrading from SLES 10 to SLEHA 11</title>
  <para> For convenience, &productnamereg; includes a
    <filename>hb2openais.sh</filename> script with which to convert your data
   while moving from the &hb; to the &ais; cluster stack. The script
   parses the configuration stored in <filename>/etc/ha.d/ha.cf</filename> and
   generates a new configuration file for the &ais; cluster stack.
   Furthermore, it adjusts the CIB to match the &ais; conventions, converts
   the OCFS2 file system and replaces EVMS with cLVM. </para>
  <para> To successfully migrate your cluster from &sls; 10 SP3 to &sls;
   11, you need to execute the following steps: </para>
  <orderedlist>
   <listitem>
    <para>
     <xref linkend="pro.ha.migration.sle11.prep" xrefstyle="select:title"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="pro.ha.migration.sle11.install" xrefstyle="select:title"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="pro.ha.migration.sle11.test" xrefstyle="select:title"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="pro.ha.migration.sle11.convert" xrefstyle="select:title"/>
    </para>
   </listitem>
  </orderedlist>
  <para> After the conversion has been successfully completed, you can bring the
   updated cluster online again. </para>
  <note>
   <title>Reverting after Update</title>
   <para> After the update process to &sls; 11, reverting back to &sls;
    10 is <emphasis>not</emphasis> supported. </para>
  </note>
  <sect2 id="sec.ha.migration.sle11.prep">
   <title>Preparation and Backup</title>

   <para> Before updating your cluster to the next product version and
    converting the data accordingly, you need to prepare your current cluster. </para>

   <procedure id="pro.ha.migration.sle11.prep">
    <title>Preparing your &sls; 10 SP3 Cluster</title>
    <step>
     <para> Log in to the cluster. </para>
    </step>
    <step>
     <para> Review the Heartbeat configuration file
       <filename>/etc/ha.d/ha.cf</filename> and check that all communication
      media support multicasting. </para>
    </step>
    <step>
     <para> Make sure the following files are equal on all nodes:
       <filename>/etc/ha.d/ha.cf</filename> and
       <filename>/var/lib/heartbeat/crm/cib.xml</filename>. </para>
    </step>
    <step>
     <para> Take all nodes offline by executing
      <command>rcheartbeat&nbsp;stop</command> on each node. </para>
    </step>
    <step>
     <para> In addition to the general system backup recommended before updating
      to the latest version, back up the following files, as you need them for
      running the conversion script after the update to &sls; 11: </para>
     <itemizedlist>
      <listitem>
       <para>
        <filename>/var/lib/heartbeat/crm/cib.xml</filename>
       </para>
      </listitem>
      <listitem>
       <para>
        <filename>/var/lib/heartbeat/hostcache</filename>
       </para>
      </listitem>
      <listitem>
       <para>
        <filename>/etc/ha.d/ha.cf </filename>
       </para>
      </listitem>
      <listitem>
       <para>
        <filename>/etc/logd.cf</filename>
       </para>
      </listitem>
     </itemizedlist>
    </step>
   </procedure>
  </sect2>
  <sect2 id="sec.ha.migration.sle11.install">
   <title>Update/Installation</title>

   <para> After preparing the cluster and backing up the files, you can start
    updating the cluster nodes to the next product version. Instead of running
    an update, you can also do a fresh installation of &sle; 11 on your
    cluster nodes. </para>

   <procedure id="pro.ha.migration.sle11.install">
    <title>Updating to &sle; 11</title>
    <step>
     <para>On all cluster nodes, perform an update from &sls; 10 SP3 to
      &sls; 11. <remark>taroth 090512: need to use
       hard-coded link here as the target is not included in the same
       set</remark> For information on how to update your product, refer to the
      &sls; 11 &deploy;, chapter <citetitle>Updating
       &sle;</citetitle>. </para>
     <para>Conversely, you can also freshly install &sls; 11 on all cluster
      nodes. </para>
    </step>
    <step>
     <para> On all cluster nodes, install &productname; 11
      as add-on on top of &sls;. For detailed information, see <xref
       linkend="sec.ha.installation.inst"/>. </para>
    </step>
   </procedure>
  </sect2>
  <sect2 id="sec.ha.migration.sle11.convert">
   <title>Data Conversion</title>

   <para>After having installed &sls; 11 and the &hasi;, you can start
    with the data conversion. The conversion script shipped with the &hasi;
    has been set up with care, but it cannot handle all set-ups in fully
    automatic mode. It alerts you of the changes it makes, but needs interaction
    and decisions from your side. You need to know your cluster in
    detail&mdash;it is up to you to verify that the changes are meaningful.
    The conversion script is located in <filename>/usr/lib/heartbeat</filename>
    (or in <filename>/usr/lib64/heartbeat</filename>, if you are using a 64-bit
    system). </para>

   <note>
    <title>Executing Test Runs</title>
    <para> To make yourself familiar with the conversion process, we highly
     recommend that you test the conversion first (without making any changes).
     You can use the same test directory to do repeated test runs, but you only
     need to copy the files once. </para>
   </note>

   <procedure id="pro.ha.migration.sle11.test">
    <title>Testing the Conversion</title>
    <step>
     <para> On one of the nodes, create a test directory and copy the backup
      files to the test directory: </para>
     <screen>$ mkdir /tmp/hb2openais-testdir
$ cp /etc/ha.d/ha.cf /tmp/hb2openais-testdir
$ cp /var/lib/heartbeat/hostcache /tmp/hb2openais-testdir
$ cp /etc/logd.cf /tmp/hb2openais-testdir
$ sudo cp /var/lib/heartbeat/crm/cib.xml /tmp/hb2openais-testdir</screen>
    </step>
    <step>
     <para> Start the test run with </para>
     <screen>$ /usr/lib/heartbeat/hb2openais.sh -T /tmp/hb2openais-testdir -U</screen>
     <para> or with the following command, if you are using a 64-bit system: </para>
     <screen>$ /usr/lib64/heartbeat/hb2openais.sh -T /tmp/hb2openais-testdir -U</screen>
    </step>
    <step>
     <para> Read and verify the resulting <filename>openais.conf</filename> and
       <filename>cib-out.xml</filename> files: </para>
     <screen>$ cd  /tmp/hb2openais-testdir 
$ less openais.conf 
$ crm_verify -V -x cib-out.xml</screen>
    </step>
   </procedure>

   <para> For detailed information about the conversion stages, refer to
     <filename>/usr/share/doc/packages/pacemaker/README.hb2openais</filename> in
    your installed &hasi;. </para>

   <procedure id="pro.ha.migration.sle11.convert">
    <title>Converting the Data</title>
    <para> After doing a test run and checking the output, you can now start
     with the data conversion. You only need to run the conversion on
      <emphasis>one</emphasis> node. The main cluster configuration (the CIB) is
     automatically replicated to the other nodes. All other files that need to
     be replicated are automatically copied by the conversion script. </para>
    <step>
     <para> Make sure that sshd is running on all nodes with access allowed for
      &rootuser; in order for the conversion script to successfully copy the
      files to the other cluster nodes. </para>
    </step>
    <step>
     <para> The &hasi; ships with a default &ais; configuration file. If
      you want to prevent the default configuration from being overwritten
      during the following steps, make a copy of the
      <filename>/etc/ais/openais.conf</filename> configuration file.
     </para>
    </step>
    <step>
     <para> Start the conversion script as &rootuser;. If using sudo,
      specify the privileged user using the <option>-u</option> option: </para>
     <screen>$ /usr/lib/heartbeat/hb2openais.sh -u root</screen>
     <para> Based on the configuration stored in
       <filename>/etc/ha.d/ha.cf</filename>, the script will generate a new
      configuration file for the &ais; cluster stack,
      <filename>/etc/ais/openais.conf</filename>. It will also analyze
      the CIB configuration and let you know if your cluster configuration
      requires changes, due to the change from &hb; to &ais;. All file
      processing is done on the node where conversion runs and replicated to the
      other nodes. </para>
    </step>
    <step>
     <para> Follow the instructions on the screen. </para>
    </step>
   </procedure>

   <para>After the conversion has been finished successfully, start the new
    cluster stack as described in <xref linkend="sec.ha.installation.start"/>. </para>

   <para> After the upgrade process, reverting back to &sls; 10 is not
    supported. </para>

   <!-- <note>
   <title>Reverting the Conversion</title>
   <para>The conversion procedure creates backups of all affected files,
    thus allowing you to revert to the version from the time of backup.</para>
   <para>If you need to revert, run the following command on the node
    where you started the conversion script:</para>
<screen>$ /usr/lib/heartbeat/hb2openais.sh revert</screen>
  </note>-->

  </sect2>
  <sect2 id="sec.ha.migration.sle11.more">
   <title>For More Information</title>

   <para> For more details about the conversion script and the stages of the
    conversion, refer to
     <filename>/usr/share/doc/packages/pacemaker/README.hb2openais</filename> in
    your installed &hasi;. </para>
  </sect2>
 </sect1>
 <sect1 id="sec.ha.migration.sle11.sp1">
  <title>Upgrading from SLEHA 11 to SLEHA 11 SP1</title>
  <para>To successfully migrate an existing cluster from &productname; 11 to
   &productnumber; you can do a <quote>rolling upgrade</quote>, meaning
   upgrading one node after the other. This includes the following steps:</para>
  <!--1. stopping openais/corosync on a node-->
  <!--2.backup files???-->
  <!--3. upgrading the node to the lastes productversion-->
  <!--4. converting openais.conf to corosync.conf (how?)-->
  <!--5. restarting openais/corosync-->
  <!--6. repeating the procedure for the next nodes (use csync2 to propagate the
   new config files?)-->

  <!--https://fate.novell.com/305304-->
  <procedure id="pro.ha.migration.rolling.upgrade">
   <title>Performing a Rolling Upgrade</title>
   <important>
    <!--https://bugzilla.novell.com/show_bug.cgi?id=573817#c6-->
    <title>Updating Software Packages</title>
    <para>If you want to update any software packages on a node that is part of
     a running cluster, stop the cluster stack on that node before starting the
     software update. To stop the cluster stack, log in to the node as
     &rootuser; and enter <command>rcopenais&nbsp;stop</command>.</para>
    <para>If &ais;/&corosync; is running during the software update,
     this can lead to unpredictable results like fencing of active nodes.</para>
   </important>
   <step>
    <para>Log in as &rootuser; on the node that you want to upgrade and stop
     &ais;:</para>
    <screen>rcopenais&nbsp;stop</screen>
   </step>
   <step>
    <para>In addition to the general system backup recommended before upgrading
     to the latest version, back up the following files, as you need to convert
     them to &corosync; after the upgrade:</para>
    <itemizedlist>
     <listitem>
      <para>
       <filename>/etc/ais/openais.conf</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <remark>taroth 2010-03-11: DEVs, any other files that need conversion
        afterwards?</remark>
      </para>
     </listitem>
    </itemizedlist>
   </step>
   <step>
    <para>Perform an upgrade from &sls; 11 to &sls; 11 SP1 and from
     &productname; 11 to &productname; 11 SP1. <remark>taroth 090512:
      need to use hard-coded link here as the target is not included in the same
      set</remark> For information on how to update your product, refer to the
     &sls; &productnumber; &deploy;, chapter <citetitle>Updating
      &sle;</citetitle>.</para>
   </step>
   <step id="step.ha.migration.convert.coro">
    <para>
     <remark>taroth 2010-03-11: DEVs, how? manually? or is there any script we
      ship for this?</remark>Convert your former cluster configuration file
      (<filename>/etc/ais/openais.conf</filename>) to
      <filename>/etc/corosync/corosync.conf</filename>, which is the cluster
     configuration file needed for &productname; &productnumber;.</para>
   </step>
   <step>
    <para>
     <remark>taroth 2010-03-11: DEVs, does this really work? (based on different
      config files now present in the cluster: openais.conf vs. corosync.conf?
      see also https://bugzilla.novell.com/show_bug.cgi?id=573817#c9</remark>
     Restart &ais;/&corosync; on the upgraded node to make the node
     rejoin the cluster:</para>
    <screen>rcopenais&nbsp;start</screen>
   </step>
   <step>
    <para><remark>taroth 2010-03-11: DEVs, is this correct?</remark>Take the
     next node offline and repeat the procedure for that node. Instead of
     repeating <xref linkend="step.ha.migration.convert.coro"/>, you can use
     &csync; to transfer the key configuration files (like
      <filename>/etc/corosync/corosync.conf</filename>) from an already upgraded
     node. For more information, refer to <xref
      linkend="sec.ha.installation.setup.csync2"/>.</para>
   </step>
  </procedure>
  <para/>
 </sect1>
</appendix>

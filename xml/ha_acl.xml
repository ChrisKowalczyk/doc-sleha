<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd" [
 <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
 <!ENTITY % entities SYSTEM "entity-decl.ent">
 %entities;
]>

<!--
   * Hawk is getting an ACL editor in SLE 12 (fate#310170)
   
   taroth 2014-08-12: from fate#310170:
   
   Use fix persona or configurable persona in the GUI and CLI for 
   * Superuser (installation and configuration of cluster nodes), 
   * Administrator (configures services on existing HA nodes), 
   * Operator (can only operate on an exiting resource configuration)
   * Monitor (read only for monitoring purpose).
-->
<chapter id="cha.ha.acl">
 <title>Access Control Lists</title>
 <abstract>
  <para> The cluster administration tools like &crmshell; (&crmsh;) or
   &hawk; can be used by &rootuser; or any user in the group <systemitem
    class="groupname">haclient</systemitem>. By default, these users have full
   read/write access. To limit access or assign more fine-grained access rights,
   you can make use of <emphasis>Access control lists</emphasis> (ACLs). </para>

  <para> Access control lists consist of an ordered set of access rules. Each
   rule allows read or write access or denies access to a part of the cluster
   configuration. Rules are typically combined to produce a specific role, then
   users may be assigned to a role that matches their tasks. </para>
 </abstract>
 <sect1 id="sec.ha.acl.require">
  <title>Requirements and Prerequisites</title>

  <para> Before you start using ACLs on your cluster, make sure the following
   conditions are fulfilled: </para>

  <itemizedlist>
   <listitem>
    <para> Ensure you have the same users on all nodes in your cluster, either
     by using NIS, Active Directory, or by manually adding the same users to all
     nodes. </para>
   </listitem>
   <listitem>
    <para> All users for whom you want to modify access rights with ACLs must
     belong to the <systemitem class="groupname">haclient</systemitem> group.
    </para>
   </listitem>
   <listitem>
    <para> All users need to run &crmsh; by its absolute path
      <filename>/usr/sbin/crm</filename>. </para>
   </listitem>
   <listitem>
    <para> If non-privileged users want to run &crmsh;, their
      <envar>PATH</envar> variable needs to be extended with
      <filename>/usr/sbin</filename>. </para>
   </listitem>
  </itemizedlist>

  <important>
   <title>Default Access Rights</title>
   <itemizedlist>
    <listitem>
     <para>ACLs are an optional feature. By default, use of ACLs is disabled.
     </para>
    </listitem>
    <listitem>
     <para>If ACLs are not enabled, &rootuser; and all users belonging to
      the <systemitem class="groupname">haclient</systemitem> group have full
      read/write access to the cluster configuration.</para>
    </listitem>
    <listitem>
     <para>Even if ACLs are enabled and configured, both &rootuser; and the
      default CRM owner <systemitem class="username">hacluster</systemitem>
      <emphasis>always</emphasis> have full access to the cluster
      configuration.</para>
    </listitem>
   </itemizedlist>
  </important>

  <para> To use ACLs you need some knowledge about XPath. XPath is a language
   for selecting nodes in an XML document. Refer to <ulink
    url="http://en.wikipedia.org/wiki/XPath"/> or look into the specification at
    <ulink url="http://www.w3.org/TR/xpath/"/>. </para>
 </sect1>
 
 <sect1 id="sec.ha.acl.enable">
  <title>Enabling Use of ACLs In Your Cluster</title>
  <para>Before you can start configuring ACLs, you need to
    <emphasis>enable</emphasis> use of ACLs. To do so, use the following command
   in the &crmsh;:</para>
  <screen>&prompt.root;<command>crm</command> configure property enable-acl=true</screen>

  <para>Alternatively, use &hawk; as described in <xref linkend="pro.ha.acl.enable.hawk"/>.</para>
  <procedure id="pro.ha.acl.enable.hawk">
   <title>Enabling Use of ACLs with &hawk;</title>

   <step>
    <para> Start a Web browser and log in to the cluster as described in <xref
      linkend="sec.ha.config.hawk.intro.connect"/>. </para>
   </step>
   <step>
    <para> In the left navigation bar, select <guimenu>Cluster
      Properties</guimenu>. </para>
   </step>
   <step>
    <para>In the <guimenu>CRM Configuration group, </guimenu>, select the
      <guimenu>enable-acl</guimenu> attribute from the empty drop-down box and
     click the plus icon to add it. </para>
   </step>
   <step>
    <para>To set <literal>enable-acl=true</literal>, active the checkbox next
     to <literal>enable-acl</literal> and confirm your changes. </para>
   </step>
  </procedure>

 </sect1>


 <sect1 id="sec.ha.acl.basics">
  <title>The Basics of ACLs</title>

  <para> Access control lists consist of an ordered set of access rules. Each
   rule allows read or write access or denies access to a part of the cluster
   configuration. Rules are typically combined to produce a specific role, then
   users may be assigned to a role that matches their tasks.
   
   An ACL role is a set of rules which describe access rights to CIB. 
   A rule consist of the following: </para>

  <itemizedlist>
   <listitem>
    <para>an  access right like <literal>read</literal>, <literal>write</literal>, or 
     <literal>deny</literal></para>
   </listitem>
   <listitem>
    <para> a specification where to apply the rule. This specification can be a
     tag, an ID reference, a combination of both, or an XPath expression.
    </para>
   </listitem>
  </itemizedlist>

  <para> In most cases, it is convenient to bundle ACLs into roles and assign a
   specific role to users. It is also possible to configure ACLs directly for
   individual users.</para>

  <para> There are two methods to create ACL rules: </para>

  <itemizedlist>
   <listitem>
    <para><xref linkend="sec.ha.acl.config.xpath"/>. You need to know the structure of the underlying XML to create ACL
      rules. </para>
   </listitem>
   <listitem>
    <para><xref linkend="sec.ha.acl.config.tag"/>. Create a shorthand syntax and
     ACL rules apply to the matched objects. <remark>taroth 2014-08-12: not sure
      what this means (maybe "to apply to") - check with toms</remark></para>
   </listitem>
  </itemizedlist>

  <sect2 id="sec.ha.acl.config.xpath">
   <title>Setting ACL Rules via XPath Expressions</title>
   <para> To manage ACL rules via XPath, you need to know the structure of the
    underlying XML. Retrieve the structure with the following command that shows
    your cluster configuration in XML (see
    <xref linkend="ex.ha.acl.excerpt"/>):
   </para>
   <screen>&prompt.root;<command>crm</command> configure show xml</screen>
   <remark>taroth 2014-08-13: filed https://bugzilla.novell.com/show_bug.cgi?id=891695 for a future "Show CIB"
    option in Hawk</remark>
   <example id="ex.ha.acl.excerpt">
    <title>Excerpt of a Cluster Configuration in XML</title>
    <screen><![CDATA[<num_updates="59" 
      dc-uuid="175704363"
      crm_feature_set="3.0.9"
      validate-with="pacemaker-2.0"
      epoch="96"
      admin_epoch="0"
      cib-last-written="Fri Aug  8 13:47:28 2014"
      have-quorum="1">
  <configuration>
    <crm_config>
       <cluster_property_set id="cib-bootstrap-options">
        <nvpair name="stonith-enabled" value="true" id="cib-bootstrap-options-stonith-enabled"/>
        <nvpair name="no-quorum-policy" value="ignore" id="cib-bootstrap-options-no-quorum-policy"/>
         [...]
      </cluster_property_set>
    </crm_config>
    <nodes>
      <node id="175704363" uname="alice"/>
      <node id="175704619" uname="bob"/>
    </nodes>
    <resources> [...]  </resources>
    <constraints/>
    <rsc_defaults> [...] </rsc_defaults>
    <op_defaults> [...] </op_defaults>
  <configuration>
</cib>]]></screen>
   </example>
   <para> With the XPath language you can locate nodes in this XML document. For
    example, to select the root node (<literal>cib</literal>) use the XPath
    expression <literal>/cib</literal>. To locate the global cluster
    configurations, use the XPath expression
     <literal>/cib/configuration/crm_config</literal>. </para>
   <para>As an example, <xref linkend="tab.ha.acl.operator"/> shows the
    parameters (access type and XPath expression) to create an
     <quote>operator</quote> role. Users with this role can only execute the
    tasks mentioned in the second column&mdash;they will not be able to
    reconfigure any resources (for example, change parameters or operations),
    nor change the configuration of colocation or ordering constraints. </para>
   
   <table id="tab.ha.acl.operator">
    <title>Operator Role&mdash;Access Types and XPath Expressions </title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>
        <para> Type </para>
       </entry>
       <entry>
        <para> XPath/Explanation </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para> Write </para>
       </entry>
       <entry>
        <screen>//crm_config//nvpair[@name='maintenance-mode']</screen>
        <para> Turn maintenance mode on or off. </para>
       </entry>
      </row>
      <row>
       <entry>
        <para> Write </para>
       </entry>
       <entry>
        <screen>//op_defaults//nvpair[@name='record-pending']</screen>
        <para> Choose whether pending operations are recorded. </para>
       </entry>
      </row>
      <row>
       <entry>
        <para> Write </para>
       </entry>
       <entry>
        <screen>//nodes/node//nvpair[@name='standby']</screen>
        <para> Set node in online or standby mode. </para>
       </entry>
      </row>
      <row>
       <entry>
        <para> Write </para>
       </entry>
       <entry>
        <screen>//resources//nvpair[@name='target-role']</screen>
        <para> Start, stop, promote or demote any resource. </para>
       </entry>
      </row>
      <row>
       <entry>
        <para> Write </para>
       </entry>
       <entry>
        <screen>//resources//nvpair[@name='is-managed']</screen>
        <para> Select if a resource should be managed or not. </para>
       </entry>
      </row>
      <row>
       <entry>
        <para> Write </para>
       </entry>
       <entry>
        <screen>//constraints/rsc_location</screen>
        <para> Migrate/move resources from one node to another. </para>
       </entry>
      </row>
      <row>
       <entry>
        <para> Read </para>
       </entry>
       <entry>
        <screen>/cib</screen>
        <para> View the status of the cluster. </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect2>

  <sect2 id="sec.ha.acl.config.tag">
   <title>Setting ACL Rules via Tag Abbreviations</title>
   <para> For users who do not want to deal with the XML structure there is an
    easier method. It is a combination of a tag specifier and/or a reference. </para>
   <para> For example, consider the following XPath: </para>
   <screen>/cib/resources/primitive[@id='rsc1']</screen>
   <para>
    <literal>primitive</literal> is a resource with the reference
     <literal>rsc1</literal>. The abbreviated syntax is: </para>
   <screen>tag: "primitive"  ref:"rsc1"</screen>
   <para> This also works for constraints. Here is the verbose XPath: </para>
   <screen>/cib/constraint/rsc_location</screen>
   <para> The abbreviated syntax is written like this: </para>
   <screen>tag: "rsc_location"</screen>
   <para> The abbreviated syntax can be used in &crmsh; and &hawk;.
    The CIB daemon knows how to apply the ACL rules to the matching
    objects. 
   </para>
  </sect2>
 </sect1>
 <!--<sect1 id="sec.ha.acl.config.hbgui">
  <title>Configuring ACLs with the &hbgui;</title>

  <para>
   Use the &hbgui; to define your roles and users. The following procedure
   adds a <quote>monitor</quote> role which has only read access to the CIB.
   Proceed as follows:
  </para>

  <procedure id="pro.ha.acl.hbgui">
   <title>Adding a Monitor Role and Assigning a User with the &hbgui;</title>
   <step>
    <para>
     Start the &hbgui; and log in as described in
     <xref 
          linkend="sec.ha.configuration.gui.intro.connect"/>.
    </para>
   </step>
   <step>
    <para>
     Click the <guimenu>ACLs</guimenu> entry in the
     <guimenu>Configuration</guimenu> tree.
    </para>
   </step>
   <step>
    <para>
     Click <guimenu>Add</guimenu>. A dialog box appears. Choose between
     <guimenu>ACL User</guimenu> and <guimenu>ACL Role</guimenu>.
    </para>
   </step>
   <step>
    <para>
     To define your ACL role(s):
    </para>
    <substeps>
     <step>
      <para>
       Choose <guimenu>ACL Role</guimenu>. A window opens in which you add
       your configuration options.
      </para>
     </step>
     <step id="st.ha.acl.config.hbgui.id">
      <para>
       Add a unique identifier in the <guimenu>ID</guimenu> textfield, for
       example <literal>monitor</literal>.
      </para>
     </step>
     <step id="st.ha.acl.config.hbgui.add">
      <para>
       Click <guimenu>Add</guimenu> and choose the rights
       (<guimenu>Read</guimenu>, <guimenu>Write</guimenu>, or
       <guimenu>Deny</guimenu>). In our example, select
       <guimenu>Read</guimenu> and proceed with <guimenu>Ok</guimenu>.
      </para>
     </step>
     <step id="st.ha.acl.config.hbgui.xpath">
      <para>
       Enter the XPath expression <literal>/cib</literal> in the
       <guimenu>Xpath</guimenu> textfield. Proceed with
       <guimenu>Ok</guimenu>.
      </para>
      <para>
       Sidenote: If you have resources or constraints, you can also use the
       abbreviated syntax as explained in
       <xref 
           linkend="sec.ha.acl.config.tag"/>. In this case,
       enter your tag in the <guimenu>Tag</guimenu> textfield and the
       optional reference in the <guimenu>Ref</guimenu> textfield. In our
       example, there is no abbreviated form possible, so you can only use
       the XPath notation here.
      </para>
     </step>
     <step>
      <para>
       If you have other conditions, repeat the steps
       (<xref
              linkend="st.ha.acl.config.hbgui.add"/> and
       <xref
              linkend="st.ha.acl.config.hbgui.xpath"/>). In our
       example, this is not the case so your role is finished and you can
       close the window with <guimenu>Ok</guimenu>.
      </para>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Assign your role to a user:
    </para>
    <substeps>
     <step>
      <para>
       Click the <guimenu>Add</guimenu> button. A dialog box appears to
       choose between <guimenu>ACL User</guimenu> and <guimenu>ACL
       Role</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Choose <guimenu>ACL User</guimenu>. A window opens in which you add
       your configuration options.
      </para>
     </step>
     <step>
      <para>
       Enter the username in the <guimenu>ID</guimenu> textfield. Make sure
       this user belongs to the
       <systemitem
       class="groupname">haclient</systemitem> group.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Add</guimenu> and choose <guimenu>Role Ref</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Use the role name specified in
       <xref
              linkend="st.ha.acl.config.hbgui.id"/>.
      </para>
     </step>
    </substeps>
   </step>
  </procedure>
 </sect1>-->
 <sect1 id="sec.ha.acl.config.crm">
  <title>Configuring ACLs with &crmsh;</title>

  <para> The following procedure shows how to configure a read-only access to
   the cluster configuration by defining a <literal>monitor</literal> role
   and assigning  it to a user. </para>

  <procedure id="pro.ha.acl.crm">
   <title>Adding a Monitor Role and Assigning a User with &crmsh;</title>
   <step>
    <para> Log in as &rootuser;. </para>
   </step>
   <step>
    <para> Start the interactive mode of &crmsh;: </para>
    <screen>&prompt.root;<command>crm</command> configure
&prompt.crm.conf;</screen>
   </step>
   <step>
    <para> Define your ACL role(s): </para>
    <substeps>
     <step>
      <para> Use the <command>role</command> command to define a new role:</para>
      <screen>&prompt.crm.conf;<command>role</command> monitor read xpath:"/cib"</screen>
      <para> The previous command creates a new role with name
        <literal>monitor</literal>, sets the <literal>read</literal> rights and applies it to all
       elements in the CIB by using the XPath <literal>/cib</literal>. If
       necessary, you can add more access rights and XPath arguments. </para>
      </step>
     <step>
      <para> Add additional roles as needed. </para>
     </step>
    </substeps>
   </step>
   <step>
    <para> Assign your roles to one or multiple users. Make sure the users belong to the
      <systemitem class="groupname">haclient</systemitem> group. </para>
    <screen>&prompt.crm.conf;<command>user</command> &exampleuser; role:monitor</screen>
   </step>
   <step>
    <para> Check your changes: </para>
    <screen>&prompt.crm.conf;<command>show</command></screen>
   </step>
   <step>
    <para> Commit your changes: </para>
    <screen>&prompt.crm.conf;<command>commit</command></screen>
   </step>
  </procedure>
  <para>If you have resources or constraints, you can also use the abbreviated
   syntax as explained in <xref linkend="sec.ha.acl.config.tag"/>. If you have a
   primitive resource with the ID <literal>rsc1</literal>, use the following
   notation to set the access rights: <literal>write tag:"primitive"
    ref:"rsc1"</literal>. You can also refer to the ID with <literal>write
    ref:"rsc1"</literal>. This has the advantage that it can match a primitive
   resource and a local resource manager resource (LRM), which enables you to
   configure <literal>rsc1</literal> and also cleanup its status at the same
   time. </para>
  
 </sect1>
 <sect1 id="sec.ha.acl.moreinfo">
  <title>For More Information</title>

  <para> See <ulink url="http://www.clusterlabs.org/doc/acls.html"/>. </para>
 </sect1>
</chapter>

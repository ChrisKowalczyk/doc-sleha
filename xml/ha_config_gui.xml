<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd" [
 <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
 <!ENTITY % entities SYSTEM "entity-decl.ent">
 %entities;
]>
<!--taroth 090713: for next revision, elaborate sec.ha.configuration.remove with input
from http://bugzilla.novell.com/show_bug.cgi?id=520718-->
<!--taroth 2010-02-10: todo - https://fate.novell.com/303384
                                                   https://fate.novell.com/307503-->
<chapter id="cha.ha.configuration.gui">
 <title>Configuring
<!-- and Managing-->
  Cluster Resources with the GUI</title>
 <abstract>
  
  <para>
   <remark>taroth 2010-02-19: what about HAWK? can it also create
    resources?</remark>
   To create cluster resources, either use the graphical user interface (the
   &hbgui;) or the <literal>crm</literal> command line utility. For the
   command line approach, refer to
   <xref
    linkend="cha.ha.manual_config"/>.
  </para>

  <para>
   This chapter introduces the &hbgui; and then covers several topics you
   need when configuring a cluster: creating resources, configuring
   constraints, specifying failover nodes and failback nodes, configuring
   resource monitoring, starting or removing resources, configuring resource
   groups or clone resources, and migrating resources manually.
  </para>

  <para>
   The graphical user interface for configuring cluster resources is
   included in the
   <systemitem class="resource"
    >pacemaker-mgmt-client</systemitem>
   package.
   <remark>taroth 2010-0-02: ygao,
    is the following correct?</remark>
   The base tools for the GUI are provided by the
   <systemitem class="resource">pacemaker-mgmt</systemitem> package,
   containing a Simple Network Management Protocol (SNMP) plug-in and the
   <systemitem class="daemon">mgmtd</systemitem> daemon.
  </para>
 </abstract>
 <sect1 id="sec.ha.configuration.gui">
  <title>&hbgui;</title>

  <para>
   When starting the &hbgui; you need to connect to a cluster.
  </para>

  <note>
   <title>Password for the <systemitem>hacluster</systemitem> User</title>
   <para>
    The installation creates a linux user named
    <systemitem>hacluster</systemitem>. Prior to using the &hbgui;, you must
    set the password for the <systemitem>hacluster</systemitem> user. To do
    this, become &rootuser;, enter <command>passwd hacluster</command> at
    the command line and enter a password for the
    <systemitem>hacluster</systemitem> user.
   </para>
   <para>
    Do this on every node you will connect to with the &hbgui;.
   </para>
  </note>

  <para>
   To start the &hbgui;, enter <command>crm_gui</command> at the command
   line. To connect to the cluster, select <menuchoice>
   <guimenu>Connection</guimenu> <guimenu>Login</guimenu> </menuchoice>. By
   default, the <guimenu>Server</guimenu> field shows the localhost's IP
   address and <systemitem>hacluster</systemitem> as <guimenu>User
   Name</guimenu>. Enter the user's password to continue.
  </para>

  <figure pgwide="0">
   <title>Connecting to the Cluster</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="crmgui-login.png" width="45%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="crmgui-login.png" width="45%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   If you are running the &hbgui; remotely, enter the IP address of a
   cluster node as <guimenu>Server</guimenu>. As <guimenu>User
   Name</guimenu>, you can also use any other user belonging to the
   <systemitem>haclient</systemitem> group to connect ot the cluster.
  </para>

<?dbfo-need height="10em"?>

  <para>
   After being connected, the main window opens:
  </para>

  <figure pgwide="0">
   <title>&hbgui; - Main Window</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="crmgui-main.png" width="75%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="crmgui-main.png" width="75%" format="png"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   <remark>taroth 2010-02-02: for toms it was unclear where to access the
   XML mode from - check and describe in more detail</remark>
   The &hbgui; lets you add and modify resources, constraints,
   configurations etc. It also provides functions for managing cluster
   components like starting, stopping or migrating resources, cleaning up
   resources, or setting nodes to <literal>standby</literal>. Additionally,
   you can easily view, edit, import and export the XML structures of the
   CIB by selecting any of the <guimenu>Configuration</guimenu> subitems and
   selecting <menuchoice> <guimenu>Show</guimenu> <guimenu>XML
   Mode</guimenu> </menuchoice>.
  </para>

  <para>
   In the following, find some examples how to create and manage cluster
   resources with the &hbgui;.
  </para>
 </sect1>
 <sect1 id="sec.ha.configuration.create">
  <title>Creating Cluster Resources</title>

  <para>FIXME: short intro</para>

  <procedure id="pro.ha.config.gui.primitives">
   <title>Adding Primitive Resources</title>
   <step id="st.ha.configuration.create.start">
    <para>
     Start the &hbgui; and log in to the cluster as described in
     <xref
      linkend="sec.ha.configuration.gui"/>.
    </para>
   </step>
   <step>
    <para>
     In the left pane, select <guimenu>Resources</guimenu> and click
     <menuchoice> <guimenu>Add</guimenu> <guimenu>Primitive</guimenu>
     </menuchoice>.
    </para>
   </step>
   <step>
    <para>
     In the next dialog, set the following parameters for the resource:
    </para>
    <substeps>
     <step>
      <para>
       Enter a unique <literal>ID</literal> for the resource.
      </para>
     </step>
     <step>
      <para>
       From the <guimenu>Class</guimenu> list, select the resource agent
       class you want to use for that resource:
       <guimenu>heartbeat</guimenu>, <guimenu>lsb</guimenu>,
       <guimenu>ocf</guimenu> or <guimenu>stonith</guimenu>. For more
       information, see
       <xref
        linkend="sec.ha.resources.raclasses"/>.
      </para>
     </step>
     <step>
      <para>
       If you selected <guimenu>ocf</guimenu> as class, specify also the
       <guimenu>Provider</guimenu> of your OCF resource agent. The OCF
       specification allows multiple vendors to supply the same resource
       agent.
      </para>
     </step>
     <step>
      <para>
       From the <guimenu>Type</guimenu> list, select the resource agent you
       want to use (for example, <guimenu>IPaddr</guimenu> or
       <guimenu>Filesystem</guimenu>). A short description for this resource
       agent is displayed below.
      </para>
      <para>
       The selection you get in the <guimenu>Type</guimenu> list depends on
       the <guimenu>Class</guimenu> (and for OCF resources also on the
       <guimenu>Provider</guimenu>) you have chosen.
      </para>
     </step>
     <step>
      <para>
       Below <guimenu>Options</guimenu>, set the <guimenu>Initial state of
       resource</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Activate <guimenu>Add monitor operation</guimenu> if you want the
       cluster to monitor if the resource is still healthy.
      </para>
      <informalfigure>
       <mediaobject>
        <imageobject role="fo">
         <imagedata fileref="crmgui-primitive-basic.png" width="70%" format="PNG"/>
        </imageobject>
        <imageobject role="html">
         <imagedata fileref="crmgui-primitive-basic.png" width="70%" format="png"/>
        </imageobject>
       </mediaobject>
      </informalfigure>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Click <guimenu>Forward</guimenu>. The next window shows a summary of
     the parameters that you have already defined for that resource. All
     required <guimenu>Instance Attributes</guimenu> for that resource are
     listed. You need to edit them in order to set them to appropriate
     values. You may also need to add more attributes, depending on your
     deployment and settings. For details how to do so, refer to
     <xref linkend="pro.ha.config.gui.parameters"/>.
    </para>
   </step>
   <step>
    <para>
     If all parameters are set according to your wishes, click
     <guimenu>Apply</guimenu> to finish the configuration of that resource.
     The configuration dialog is closed and the main window shows the newly
     added resource.
    </para>
   </step>
  </procedure>

  <para>FIXME: short intro</para>

  <procedure id="pro.ha.config.gui.parameters">
   <title>Adding or Modifying Meta and Instance Attributes</title>
   <step>
    <para>
     In the &hbgui; main window, click <guimenu>Resources</guimenu> in the
     left pane to see the resources already configured for the cluster.
    </para>
   </step>
   <step>
    <para>
     In the right pane, select the resource to modify and click
     <guimenu>Edit</guimenu> (or double-click the resource). The next window
     shows the basic resource parameters and the <guimenu>Meta
     Attributes</guimenu>, <guimenu>Instance Attributes</guimenu> or
     <guimenu>Operations</guimenu> already defined for that resource.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="crmgui-primitive-attributes.png" width="40%" format="PNG"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="crmgui-primitive-attributes.png" width="40%" format="png"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
   </step>
   <step>
    <para>
     To add a new meta attribute or instance attribute, select the
     respective tab and click <guimenu>Add</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Select the <guimenu>Name</guimenu> of the attribute you want to add. A
     short <guimenu>Description</guimenu> is displayed.
    </para>
   </step>
   <step>
    <para>
     If needed, specify an attribute <guimenu>Value</guimenu>.
     <remark>taroth 090319: DEVs, is
      the following true? - ygao: Yes, it is supposed to be like that if the resource agent was
      implemented as the metadata describes:) </remark>
     Otherwise the default value of that attribute will be used.
    </para>
   </step>
   <step>
    <para>
     Click <guimenu>OK</guimenu> to confirm your changes. The newly added or
     modified attribute appears on the tab.
    </para>
   </step>
   <step>
    <para>
     If all parameters are set according to your wishes, click
     <guimenu>OK</guimenu> to finish the configuration of that resource. The
     configuration dialog is closed and the main window shows the modified
     resource.
    </para>
   </step>
  </procedure>

  <tip>
   <title>XML Source Code</title>
   <para>
    The &hbgui; allows you to view the XML that is generated from the
    parameters that you have defined for a specific resource or for all the
    resources. Select <menuchoice> <guimenu>Show</guimenu> <guimenu>XML
    Mode</guimenu> </menuchoice> in the top right corner of the resource
    configuration dialog or in the <guimenu>Resources</guimenu> view of the
    main window.
   </para>
   <para>
    The editor displaying the XML code allows you to
    <guimenu>Import</guimenu> or <guimenu>Export</guimenu> the XML elements
    or to manually edit the XML code.
   </para>
  </tip>
 </sect1>
 <sect1 id="sec.ha.configuration.stonith">
  <title>Creating &stonith; Resources</title>

  <para>
   To configure fencing, you need to configure one or more &stonith;
   resources.
  </para>

  <procedure os="pro.ha.config.gui.stonith">
   <title>Adding a &stonith; Resource</title>
   <step>
    <para>
     Start the &hbgui; and log in to the cluster as described in
     <xref
      linkend="sec.ha.configuration.gui"/>.
    </para>
   </step>
   <step>
    <para>
     In the left pane, select <guimenu>Resources</guimenu> and click
     <menuchoice> <guimenu>Add</guimenu> <guimenu>Primitive</guimenu>
     </menuchoice>.
    </para>
   </step>
   <step>
    <para>
     In the next dialog, set the following parameters for the resource:
    </para>
    <substeps>
     <step>
      <para>
       Enter a unique <literal>ID</literal> for the resource.
      </para>
     </step>
     <step>
      <para>
       From the <guimenu>Class</guimenu> list, select the resource agent
       class <guimenu>stonith</guimenu>.
      </para>
     </step>
     <step>
      <para>
       From the <guimenu>Type</guimenu> list, select the &stonith; plug-in
       for controlling your &stonith; device. A short description for this
       plug-in is displayed below.
      </para>
     </step>
     <step>
      <para>
       Below <guimenu>Options</guimenu>, set the <guimenu>Initial state of
       resource</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Activate <guimenu>Add monitor operation</guimenu> if you want the
       cluster to monitor the fencing device. For more information, refer to
       <xref linkend="sec.ha.fencing.monitor"/>.
      </para>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Click <guimenu>Forward</guimenu>. The next window shows a summary of
     the parameters that you have already defined for that resource. All
     required <guimenu>Instance Attributes</guimenu> for the selected
     &stonith; plug-in are listed. You need to edit them in order to set
     them to appropriate values. You may also need to add more attributes or
     monitor operations, depending on your deployment and settings. For
     details how to do so, refer to
     <xref
      linkend="pro.ha.config.gui.parameters"/> and
     <xref linkend="sec.ha.configuration.monitor"
     />.
    </para>
   </step>
   <step>
    <para>
     If all parameters are set according to your wishes, click
     <guimenu>Apply</guimenu> to finish the configuration of that resource.
     The configuration dialog is closed and the main window shows the newly
     added resource.
    </para>
   </step>
  </procedure>

  <para>
   To complete your fencing configuration add constraints, or use clones or
   both. For more details, refer to <xref linkend="cha.ha.fencing"/>.
  </para>
 </sect1>
 <sect1 id="sec.ha.configuration.constraints">
  <title>Configuring Resource Constraints</title>

  <para>FIXME: short intro</para>

  <procedure id="pro.ha.config.gui.constraints.location">
   <title>Adding or Modifying Locational Constraints</title>
   <step id="step.ha.configuration.constraints.start">
    <para> Start the &hbgui; and log in to the cluster as described in <xref
      linkend="sec.ha.configuration.gui"/>. </para>
   </step>
   <step>
    <para> In the &hbgui; main window, click <guimenu>Constraints</guimenu>
     in the left pane to see the constraints already configured for the cluster.
    </para>
   </step>
   <step id="step.ha.configuration.constraints.stop">
    <para> In the left pane, select <guimenu>Constraints</guimenu> and click
      <guimenu>Add</guimenu>. </para>
    <!--<para>Or select an existing constraint and click
     <guimenu>Edit</guimenu>.</para>-->
   </step>
   <step>
    <para> Select <guimenu>Resource Location</guimenu> and click
      <guimenu>OK</guimenu>. </para>
   </step>
   <step>
    <para> Enter a unique <guimenu>ID</guimenu> for the constraint. When
     modifying existing constraints, the ID is already defined and is displayed
     in the configuration dialog. </para>
   </step>
   <step>
    <para> Select the <guimenu>Resource</guimenu> for which to define the
     constraint. The list shows the IDs of all resources that have been
     configured for the cluster. </para>
   </step>
   <step>
    <para> Set the <guimenu>Score</guimenu> for the constraint. Positive values
     indicate the resource can run on the <guimenu>Node</guimenu> you specify
     below. Negative values indicate the resource can not run on this node.
     Values of <literal>+/- INFINITY</literal> change <quote>can</quote> to
      <literal>must</literal>. </para>
   </step>
   <step>
    <para> Select the <guimenu>Node</guimenu> for the constraint. </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="crmgui-constraint-location.png" width="45%"
        format="PNG"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="crmgui-constraint-location.png" width="45%"
        format="png"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
   </step>
   <step>
    <para>
     <remark>taroth 090325: todo - probably this is not the right place to
      mention this... check for better place</remark> If you leave the
      <guimenu>Node</guimenu> and the <guimenu>Score</guimenu> field empty, you
     can also add rules by clicking <menuchoice>
      <guimenu>Add</guimenu>
      <guimenu>Rule</guimenu>
     </menuchoice>. To add a lifetime, just click <menuchoice>
      <guimenu>Add</guimenu>
      <guimenu>Lifetime</guimenu>
     </menuchoice>. </para>
   </step>
   <step>
    <para> If all parameters are set according to your wishes, click
      <guimenu>OK</guimenu> to finish the configuration of the constraint. The
     configuration dialog is closed and the main window shows the newly added or
     modified constraint. </para>
   </step>
  </procedure>

  <procedure id="pro.ha.config.gui.constraints.collocation">
   <title>Adding or Modifying Collocational Constraints</title>
   <step>
    <para> Start the &hbgui; and log in to the cluster as described in <xref
      linkend="sec.ha.configuration.gui"/>. </para>
   </step>
   <step>
    <para> In the &hbgui; main window, click <guimenu>Constraints</guimenu>
     in the left pane to see the constraints already configured for the cluster.
    </para>
   </step>
   <step>
    <para> In the left pane, select <guimenu>Constraints</guimenu> and click
      <guimenu>Add</guimenu>. </para>
    <!--<para>Or select an existing constraint and click
     <guimenu>Edit</guimenu>.</para>-->
   </step>
   <step>
    <para> Select <guimenu>Resource Collocation</guimenu> and click
      <guimenu>OK</guimenu>. </para>
   </step>
   <step>
    <para> Enter a unique <guimenu>ID</guimenu> for the constraint. When
     modifying existing constraints, the ID is already defined and is displayed
     in the configuration dialog. </para>
   </step>
   <step>
    <para> Select the <guimenu>Resource</guimenu> which is the collocation
     source. The list shows the IDs of all resources that have been configured
     for the cluster. </para>
    <para> If the constraint cannot be satisﬁed, the cluster may decide not to
     allow the resource to run at all. </para>
   </step>
   <step>
    <para>
     <remark>taroth 090331: todo - probably this is not the right place to
      mention this... check for better place</remark> If you leave both the
      <guimenu>Resource</guimenu> and the <guimenu>With Resource</guimenu> field
     empty, you can also add a resource set by clicking <menuchoice>
      <guimenu>Add</guimenu>
      <guimenu>Resource Set</guimenu>
     </menuchoice>. To add a lifetime, just click <menuchoice>
      <guimenu>Add</guimenu>
      <guimenu>Lifetime</guimenu>
     </menuchoice>. </para>
   </step>
   <step>
    <para> In <guimenu>With Resource</guimenu>, define the collocation target.
     The cluster will decide where to put this resource ﬁrst and then decide
     where to put the resource in the <guimenu>Resource</guimenu> ﬁeld. </para>
   </step>
   <step>
    <para> Define a <guimenu>Score</guimenu> to determine the location
     relationship between both resources. Positive values indicate the resources
     should run on the same node. Negative values indicate the resources should
     not run on the same node. Values of <literal>+/- INFINITY</literal> change
      <literal>should</literal> to <literal>must</literal>. The score will be
     combined with other factors to decide where to put the node. </para>
   </step>
   <step>
    <para> If needed, specify further parameters, like <guimenu>Resource
      Role</guimenu>. </para>
    <para> Depending on the parameters and options you choose, a short
      <guimenu>Description</guimenu> explains the effect of the collocational
     constraint you are configuring. </para>
   </step>
   <step>
    <para> If all parameters are set according to your wishes, click
      <guimenu>OK</guimenu> to finish the configuration of the constraint. The
     configuration dialog is closed and the main window shows the newly added or
     modified constraint. </para>
   </step>
  </procedure>

  <procedure id="pro.ha.config.gui.constraints.order">
   <title>Adding or Modifying Ordering Constraints</title>
   <step>
    <para> Start the &hbgui; and log in to the cluster as described in <xref
      linkend="sec.ha.configuration.gui"/>. </para>
   </step>
   <step>
    <para> In the &hbgui; main window, click <guimenu>Constraints</guimenu>
     in the left pane to see the constraints already configured for the cluster.
    </para>
   </step>
   <step>
    <para> In the left pane, select <guimenu>Constraints</guimenu> and click
      <guimenu>Add</guimenu>. </para>
    <!--<para>Or select an existing constraint and click
     <guimenu>Edit</guimenu>.</para>-->
   </step>
   <step>
    <para> Select <guimenu>Resource Order</guimenu> and click
      <guimenu>OK</guimenu>. </para>
   </step>
   <step>
    <para> Enter a unique <guimenu>ID</guimenu> for the constraint. When
     modifying existing constraints, the ID is already defined and is displayed
     in the configuration dialog. </para>
   </step>
   <step>
    <para> With <guimenu>First</guimenu>, define the resource that must be
     started before the <guimenu>Then</guimenu> resource is allowed to. </para>
   </step>
   <step>
    <para> With <guimenu>Then</guimenu> define the resource that will start
     after the <guimenu>First</guimenu> resource. </para>
   </step>
   <step>
    <para>
     <remark>taroth 090406: according to ygao: I think we should tell users the
      default values of those parameters here. - taroth: no time left now, add
      for next review</remark> If needed, define further parameters, for example
      <guimenu>Score</guimenu> (if greater than zero, the constraint is
     mandatory; otherwise it is only a suggestion) or
      <guimenu>Symmetrical</guimenu> (if <literal>true</literal>, stop the
     resources in the reverse order). </para>
    <para> Depending on the parameters and options you choose, a short
      <guimenu>Description</guimenu> explains the effect of the ordering
     constraint you are configuring. </para>
   </step>
   <step>
    <para> If all parameters are set according to your wishes, click
      <guimenu>OK</guimenu> to finish the configuration of the constraint. The
     configuration dialog is closed and the main window shows the newly added or
     modified constraint. </para>
   </step>
  </procedure>

  <para> You can access and modify all constraints that you have configured in
   the <guimenu>Constraints</guimenu> view of the &hbgui;. </para>

  <figure>
   <title>&hbgui; - Constraints</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="crmgui-main-constraints.png" width="68%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="crmgui-main-constraints.png" width="68%" format="png"/>
    </imageobject>
   </mediaobject>
  </figure>
 </sect1>
 
 <sect1 id="sec.ha.configuration.failover">
  <title>Specifying Resource Failover Nodes</title>

  <para>
   A resource will be automatically restarted if it fails. If that cannot be
   achieved on the current node, or it fails N times on the current node, it
   will try to fail over to another node. You can define a number of
   failures for resources (a <literal>migration-threshold</literal>), after
   which they will migrate to a new node. If you have more than two nodes in
   your cluster, the node a particular resource fails over to is chosen by
   the &ha; software.
  </para>

  <para>
   If you want to choose which node a resource will fail over to, you must
   do the following:
  </para>

  <procedure id="pro.ha.config.gui.failover">
   <step>
    <para>
     Configure a location constraint for that resource as described in
     <xref
      linkend="pro.ha.config.gui.constraints.location"/>.
    </para>
   </step>
   <step>
    <para>
     Add the <literal>migration-threshold</literal> meta attribute to that
     resource as described in
     <xref linkend="pro.ha.config.gui.parameters"/> and enter a
     <guimenu>Value</guimenu> for the migration-threshold. The value should
     be positive and less that INFINITY.
    </para>
<!-- <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="crmgui-primitive-migr-threshold.png" width="45%"
        format="PNG"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="crmgui-primitive-migr-threshold.png" width="45%"
        format="png"/>
      </imageobject>
     </mediaobject>
    </informalfigure>-->
   </step>
   <step>
    <para>
     If you want to automatically expire the failcount for a resource, add
     the <literal>failure-timeout</literal> meta attribute to that resource
     as described in <xref
      linkend="pro.ha.config.gui.parameters"/>
     and enter a <guimenu>Value</guimenu> for the failure-timeout.
    </para>
   </step>
   <step>
    <para>
     If you want to specify additional failover nodes with preferences for a
     resource, create additional location constraints.
    </para>
   </step>
  </procedure>

  <para>
   For example, let us assume you have configured a location constraint for
   resource <literal>r1</literal> to preferably run on
   <literal>node1</literal>. If it fails there,
   <literal>migration-threshold</literal> is checked and compared to the
   failcount. If failcount >= migration-threshold then the resource is
   migrated to the node with the next best preference.
  </para>

  <para>
   By default, once the threshold has been reached, the node will no longer
   be allowed to run the failed resource until the administrator manually
   resets the resource’s failcount (after fixing the failure cause).
  </para>

  <para>
   However, it is possible to expire the failcounts by setting the
   resource’s failure-timeout option. So a setting of
   <literal>migration-threshold=2</literal> and
   <literal>failure-timeout=60s</literal> would cause the resource to
   migrate to a new node after two failures and potentially allow it to move
   back (depending on the stickiness and constraint scores) after one
   minute.
  </para>

  <para>
   There are two exceptions to the migration threshold concept, occurring
   when a resource either fails to start or fails to stop: Start failures
   set the failcount to INFINITY and thus always cause an immediate
   migration. Stop failures cause fencing (when
   <literal>stonith-enabled</literal> is set to <literal>true</literal>
   <remark>taroth 090402: todo: add when explaining the CRM config view - ygao: for GUI, it could be
    set in the "CRM Config" view </remark>
   which is the default). In case there is no STONITH resource defined (or
   <literal>stonith-enabled</literal> is set to <literal>false</literal>),
   the resource will not migrate at all.
  </para>

  <para>
   To clean up the failcount for a resource with the &hbgui;, select
   <guimenu>Management</guimenu> in the left pane, select the respective
   resource in the right pane and click <guimenu>Cleanup Resource</guimenu>
   in the toolbar. This executes the commands <command>crm_resource
   -C</command> and <command>crm_failcount -D</command> for the specified
   resource on the specified node. For more information, see also
   <xref linkend="man.crmresource"/> and <xref linkend="man.crmfailcount"/>.
  </para>
 </sect1>
<?dbfo-need height="20em"?>
 <sect1 id="sec.ha.configuration.failback">
  <title>Specifying Resource Failback Nodes (Resource Stickiness)</title>

  <para>
   A resource might fail back to its original node when that node is back
   online and in the cluster. If you want to prevent a resource from failing
   back to the node it was running on prior to failover, or if you want to
   specify a different node for the resource to fail back to, you must
   change its resource stickiness value. You can either specify resource
   stickiness when you are creating a resource, or afterwards.
  </para>

  <para>
   Consider the following when specifying a resource stickiness value:
  </para>

  <variablelist>
   <varlistentry>
    <term>Value is <literal>0</literal>:</term>
    <listitem>
     <para>
      <remark>taroth 090402: todo - explain better for next review - ygao: It defaults to the
       value of "default-resource-stickiness" which could be set in "CRM Config". And yes, that
       property defaults to be 0. </remark>
      This is the default. The resource will be placed optimally in the
      system. This may mean that it is moved when a <quote>better</quote> or
      less loaded node becomes available. This option is almost equivalent
      to automatic failback, except that the resource may be moved to a node
      that is not the one it was previously active on.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Value is greater than <literal>0</literal>:</term>
    <listitem>
     <para>
      The resource will prefer to remain in its current location, but may be
      moved if a more suitable node is available. Higher values indicate a
      stronger preference for a resource to stay where it is.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Value is less than <literal>0</literal>:</term>
    <listitem>
     <para>
      The resource prefers to move away from its current location. Higher
      absolute values indicate a stronger preference for a resource to be
      moved.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Value is <literal>INFINITY</literal>:</term>
    <listitem>
     <para>
      The resource will always remain in its current location unless forced
      off because the node is no longer eligible to run the resource (node
      shutdown, node standby, reaching the
      <literal>migration-threshold</literal>, or configuration change). This
      option is almost equivalent to completely disabling automatic failback
<!--ygao 090402: Really cannot understand this either technically or logically:)
       How about deleting it?:, except that the resource may be moved to other nodes
      than the one it was previously active on-->
      .
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Value is <literal>-INFINITY</literal>:</term>
    <listitem>
     <para>
      The resource will always move away from its current location.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <procedure id="pro.ha.config.gui.stickiness">
   <title>Specifying Resource Stickiness</title>
   <step>
    <para>
     Add the <literal>resource-stickiness</literal> meta attribute to the
     resource as described in
     <xref linkend="pro.ha.config.gui.parameters"/>.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="crmgui-primitive-stickiness.png" width="55%" format="PNG"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="crmgui-primitive-stickiness.png" width="55%" format="png"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
   </step>
   <step>
    <para>
     As <guimenu>Value</guimenu> for the resource-stickiness, specify a
     value between <literal>-INFINITY</literal> and
     <literal>INFINITY</literal>.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 id="sec.ha.configuration.monitor">
  <title>Configuring Resource Monitoring</title>

  <para>
   Although the &hasi; can detect a node failure, it also has the ability to
   detect when an individual resource on a node has failed. If you want to
   ensure that a resource is running, you must configure resource monitoring
   for it. Resource monitoring consists of specifying a timeout and/or start
   delay value, and an interval. The interval tells the CRM how often it
   should check the resource status. You can also
   set particular parameters, such as <literal>Timeout</literal> for
   <literal>start</literal> or <literal>stop</literal> operations.
  </para>

  <procedure id="pro.ha.config.gui.operations">
   <title>Adding or Modifying Monitor Operations</title>
   <step>
    <para>
     Start the &hbgui; and log in to the cluster as described in
     <xref
      linkend="sec.ha.configuration.gui"/>.
    </para>
   </step>
   <step>
    <para>
     In the &hbgui; main window, click <guimenu>Resources</guimenu> in the
     left pane to see the resources already configured for the cluster.
    </para>
   </step>
   <step>
    <para>
     In the right pane, select the resource to modify and click
     <guimenu>Edit</guimenu>. The next window shows the basic resource
     parameters and the meta attributes, instance attributes and operations
     already defined for that resource.
    </para>
   </step>
   <step>
    <para>
     To add a new monitor operation, select the respective tab and click
     <guimenu>Add</guimenu>.
    </para>
    <para>
     To modify an existing operation, select the respective entry and click
     <guimenu>Edit</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Enter a unique <guimenu>ID</guimenu> for the monitor operation. When
     modifying existing monitor operations, the ID is already defined and is
     displayed in the configuration dialog.
    </para>
   </step>
   <step>
    <para>
     In <guimenu>Name</guimenu>, select the action to perform, for example
     <literal>monitor</literal>, <literal>start</literal>, or
     <guimenu>stop</guimenu>.
    </para>
   </step>
   <step>
    <para>
     In the <guimenu>Interval</guimenu> field, enter a value in seconds.
    </para>
   </step>
   <step>
    <para>
     In the <guimenu>Timeout</guimenu> field, enter a value in seconds.
     After the specified timeout period, the operation will be treated as
     <literal>failed</literal>. The PE will decide what to do or execute
     what you specified in the <guimenu>On Fail</guimenu> field of the
     monitor operation.
    </para>
   </step>
   <step>
    <para>
     If needed, set optional parameters, like <guimenu>On Fail</guimenu>
     (what do if this action ever fails?) or <guimenu>Requires</guimenu>
     (what conditions need to be satisfied before this action occurs?).
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="crmgui-primitive-monitor.png" width="35%" format="PNG"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="crmgui-primitive-monitor.png" width="35%" format="png"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
   </step>
<!--according to ygao, 20090330: Usually we don't need to do that. So we don't have to mention that I
    think.<step>
    <para>To add meta attributes or instance attributes for that
    operation, click <guimenu>Add</guimenu>.</para></step>-->
   <step>
    <para>
     If all parameters are set according to your wishes, click
     <guimenu>OK</guimenu> to finish the configuration of that resource. The
     configuration dialog is closed and the main window shows the modified
     resource.
    </para>
   </step>
  </procedure>
  <para>To view resource failures in the &hbgui;, click
    <guimenu>Management</guimenu> in the left pane, then select the resource
   whose details you want to see in the right pane. </para>
  
 </sect1>
 <sect1 id="sec.ha.configuration.start">
  <title>Starting a New Cluster Resource</title>

  <note>
   <title>Starting Resources</title>
   <para>
    When configuring a resource with the &hasi;, the same resource should
    not be started or stopped manually (outside of the cluster). The &hasi;
    software is responsible for all service start or stop actions.
   </para>
  </note>

  <para>
   If a resource's initial state was set to <literal>stopped</literal> when
   being created (<literal>target-role</literal> meta attribute has the
   value <literal>stopped</literal>), it does not start automatically after
   being created. To start a new cluster resource with the &hbgui;, select
   <guimenu>Management</guimenu> in the left pane. In the right pane, right
   click the resource and select <guimenu>Start</guimenu> (or start it from
   the toolbar).
  </para>
 </sect1>
 <sect1 id="sec.ha.configuration.remove">
  <title>Removing a Cluster Resource</title>

  <para>
   To remove a cluster resource with the &hbgui;, switch to the
   <guimenu>Resources</guimenu> view in the left pane, then select the
   respective resource and click <guimenu>Remove</guimenu>.
  </para>

  <note>
   <title>Removing Referenced Resources</title>
   <para>
    Cluster resources cannot be removed if their ID is referenced by any
    constraint. If you cannot delete a resource, check where the resource ID
    is referenced and remove the resource from the constraint first.
   </para>
  </note>
 </sect1>
 <sect1 id="sec.ha.configuration.group">
  <title>Configuring a Cluster Resource Group</title>

  <para>
   Some cluster resources are dependent on other components or resources,
   and require that each component or resource starts in a specific order
   and runs together on the same server. To simplify this configuration we
   support the concept of groups.
  </para>

  <para>
   Groups have the following properties:
  </para>

  <variablelist>
   <varlistentry>
    <term>Starting and Stopping Resources</term>
    <listitem>
     <para>
      Resources are started in the order they appear in and stopped in the
      reverse order which they appear in.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Dependency</term>
    <listitem>
     <para>
      If a resource in the group cannot run anywhere, then none of the
      resources located after that resource in the group is allowed to run.
     </para>
    </listitem>
   </varlistentry>
<!--<varlistentry>
    <term>Instance Attributes</term>
    <listitem>
     <para>
      <remark>taroth 090401: DEVs, do I get it right that
       groups do not have any instance attributes *by default*, but that
       instance attributes *can* be set for groups anyway and are then
       inherited by the children? however, with the GUI, adding instance
    attributes for a group does not seem to be possible.... - ygao: Cluster resources can only be removed when
    they are not referenced by a constraints</remark>
      Groups do not have instance attributes, however any that are set
      here will be inherited by the group’s children. </para>
    </listitem>
   </varlistentry>-->
   <varlistentry>
    <term>Group Contents</term>
    <listitem>
     <para>
      Groups may only contain a collection of primitive cluster resources.
      To refer to the child of a group resource, use the child’s ID
      instead of the group’s.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Constraints</term>
    <listitem>
     <para>
      Although it is possible to reference the group’s children in
      constraints, it is usually preferable to use the group’s name
      instead.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Stickiness</term>
    <listitem>
     <para>
      Stickiness is additive in groups. Every <emphasis>active</emphasis>
      member of the group will contribute its stickiness value to the
      group’s total. So if the default
      <literal>resource-stickiness</literal> is <literal>100</literal> and a
      group has seven members (ﬁve of which are active), then the group as
      a whole will prefer its current location with a score of
      <literal>500</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Resource Monitoring</term>
    <listitem>
     <para>
      To enable resource monitoring for a group, you must configure
      monitoring separately for each resource in the group that you want
      monitored.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <note>
   <title>Empty Groups</title>
   <para>
    Groups must contain at least one resource, otherwise the configuration
    is not valid.
   </para>
  </note>

  <procedure id="pro.ha.config.gui.group">
   <title>Adding a Resource Group</title>
   <step>
    <para>
     Start the &hbgui; and log in to the cluster as described in
     <xref
      linkend="sec.ha.configuration.gui"/>.
    </para>
   </step>
   <step>
    <para>
     In the left pane, select <guimenu>Resources</guimenu> and click
     <menuchoice> <guimenu>Add</guimenu> <guimenu>Group</guimenu>
     </menuchoice>.
    </para>
   </step>
   <step>
    <para>
     Enter a unique <literal>ID</literal> for the group.
    </para>
   </step>
   <step>
    <para>
     Below <guimenu>Options</guimenu>, set the <guimenu>Initial state of
     resource</guimenu> and click <guimenu>Forward</guimenu>.
    </para>
   </step>
   <step>
    <para>
     In the next step, you can add primitives as sub-resources for the
     group. These are created similar as described in
     <xref linkend="pro.ha.config.gui.primitives"/>.
    </para>
   </step>
   <step>
    <para>
     If all parameters are set according to your wishes, click
     <guimenu>Apply</guimenu> to finish the configuration of the primitive.
    </para>
   </step>
   <step>
    <para>
     In the next window, you can continue adding sub-resources for the group
     by choosing <guimenu>Primitive</guimenu> again and clicking
     <guimenu>OK</guimenu>.
    </para>
    <para>
     When you do not want to add more primitives to the group, click
     <guimenu>Cancel</guimenu> instead. The next window shows a summary of
     the parameters that you have already defined for that group. The
     <guimenu>Meta Attributes</guimenu> and <guimenu>Primitives</guimenu> of
     the group are listed. The position of the resources in the
     <guimenu>Primitive</guimenu> tab represents the order in which the
     resources are started in the cluster.
    </para>
   </step>
   <step>
    <para>
     As the order of resources in a group is important, use the
     <guimenu>Up</guimenu> and <guimenu>Down</guimenu> buttons to sort the
     <guimenu>Primitives</guimenu> in the group.
    </para>
   </step>
   <step>
    <para>
     If all parameters are set according to your wishes, click
     <guimenu>OK</guimenu> to finish the configuration of that group. The
     configuration dialog is closed and the main window shows the newly
     created or modified group.
    </para>
   </step>
  </procedure>

  <figure>
   <title>&hbgui; - Groups</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="crmgui-main-groups.png" width="80%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="crmgui-main-groups.png" width="65%" format="png"/>
    </imageobject>
   </mediaobject>
  </figure>

  <example id="ex.ha.config.resource.group">
   <title>Resource Group for a Web Server</title>
   <para>
    An example of a resource group would be a Web server that requires an IP
    address and a file system. In this case, each component is a separate
    cluster resource that is combined into a cluster resource group. The
    resource group would then run on a server or servers, and in case of a
    software or hardware malfunction, fail over to another server in the
    cluster the same as an individual cluster resource.
   </para>
  </example>

  <figure pgwide="0">
   <title>Group Resource</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="webserver_groupresource_a.png" width="70%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="webserver_groupresource_a.png" width="63%" format="png"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   In <xref linkend="pro.ha.config.gui.group"/>, you learned how to create a
   resource group. Let us assume you already have created a resource group
   as explained above. <xref
    linkend="pro.ha.config.gui.group.modify"/>
   shows you how to modify the group to match
   <xref
    linkend="ex.ha.config.resource.group"/>.
  </para>

  <procedure id="pro.ha.config.gui.group.modify">
   <title>Adding Resources to an Existing Group</title>
   <step>
    <para>
     Start the &hbgui; and log in to the cluster as described in
     <xref
      linkend="sec.ha.configuration.gui"/>.
    </para>
   </step>
   <step>
    <para>
     In the left pane, switch to the <guimenu>Resources</guimenu> view and
     in the right pane, select the group to modify and click
     <guimenu>Edit</guimenu>. The next window shows the basic group
     parameters and the meta attributes and primitives already defined for
     that resource.
    </para>
   </step>
   <step>
    <para>
     Click the <guimenu>Primitives</guimenu> tab and click
     <guimenu>Add</guimenu>.
    </para>
   </step>
   <step>
    <para>
     In the next dialog, set the following parameters to add an IP address
     as sub-resource of the group:
    </para>
    <substeps>
     <step id="step.ha.config.gui.group.prim.start">
      <para>
       Enter a unique <literal>ID</literal> (for example,
       <literal>my_ipaddress</literal>).
      </para>
     </step>
     <step>
      <para>
       From the <guimenu>Class</guimenu> list, select <guimenu>ocf</guimenu>
       as resource agent class.
      </para>
     </step>
     <step>
      <para>
       As <guimenu>Provider</guimenu> of your OCF resource agent, select
       <guimenu>heartbeat</guimenu>.
      </para>
     </step>
     <step>
      <para>
       From the <guimenu>Type</guimenu> list, select
       <guimenu>IPaddr</guimenu> as resource agent.
      </para>
     </step>
     <step>
      <para>
       Click <guimenu>Forward</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In the <guimenu>Instance Attribute</guimenu> tab, select the
       <guimenu>IP</guimenu> entry and click <guimenu>Edit</guimenu> (or
       double-click the <guimenu>IP</guimenu> entry).
      </para>
     </step>
     <step>
      <para>
       As <guimenu>Value</guimenu>, enter the desired IP address, for
       example, <literal>192.168.1.1</literal>.
      </para>
     </step>
     <step id="step.ha.config.gui.group.prim.stop">
      <para>
       Click <guimenu>OK</guimenu> and <guimenu>Apply</guimenu>. The group
       configuration dialog shows the newly added primitive.
      </para>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Add the next sub-resources (file system and Web server) by clicking
     <guimenu>Add</guimenu> again.
    </para>
   </step>
   <step>
    <para>
     Set the respective parameters for each of the sub-resources similar to
     steps <xref
      linkend="step.ha.config.gui.group.prim.start"/> to
     <xref
      linkend="step.ha.config.gui.group.prim.stop"/>, until you
     have configured all sub-resources for the group.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="crmgui-resource-group.png" width="50%" format="PNG"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="crmgui-resource-group.png" width="45%" format="png"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
    <para>
     As we configured the sub-resources already in the order in that they
     need to be started in the cluster, the order on the
     <guimenu>Primitives</guimenu> tab is already correct.
    </para>
   </step>
   <step>
    <para>
     In case you need to change the resource order for a group, use the
     <guimenu>Up</guimenu> and <guimenu>Down</guimenu> buttons to sort the
     resources on the <guimenu>Primitive</guimenu> tab.
    </para>
   </step>
   <step>
    <para>
     To remove a resource from the group, select the resource on the
     <guimenu>Primitives</guimenu> tab and click <guimenu>Remove</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Click <guimenu>OK</guimenu> to finish the configuration of that group.
     The configuration dialog is closed and the main window shows the
     modified group.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 id="sec.ha.configuration.clone">
  <title>Configuring a Clone Resource</title>

  <para>
   You may want certain resources to run simultaneously on multiple nodes in
   your cluster. To do this you must configure a resource as a clone.
   Examples of resources that might be configured as clones include
   &stonith; and cluster file systems like OCFS2. You can clone any resource
   provided it is supported by the resource’s Resource Agent. Clone
   resources may even be configured differently depending on which nodes
   they are hosted.
  </para>

  <para>
   There are three types of resource clones:
  </para>

  <variablelist>
   <varlistentry>
    <term>Anonymous Clones</term>
    <listitem>
     <para>
      These are the simplest type of clones. They behave identically
      anywhere they are running. Because of this, there can only be one
      instance of an anonymous clone active per machine.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Globally Unique Clones</term>
    <listitem>
     <para>
      These resources are distinct entities. An instance of the clone
      running on one node is not equivalent to another instance on another
      node; nor would any two instances on the same node be equivalent.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Stateful Clones</term>
    <listitem>
     <para>
      Active instances of these resources are divided into two states,
      active and passive. These are also sometimes referred to as primary
      and secondary, or master and slave. Stateful clones can be either
      anonymous or globally unique.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

<?dbfo-need height="10em"?>

  <procedure id="pro.ha.config.gui.clone">
   <title>Adding or Modifying Clones</title>
   <step>
    <para>
     Start the &hbgui; and log in to the cluster as described in
     <xref
      linkend="sec.ha.configuration.gui"/>.
    </para>
   </step>
   <step>
    <para>
     In the left pane, select <guimenu>Resources</guimenu> and click
     <menuchoice> <guimenu>Add</guimenu> <guimenu>Clone</guimenu>
     </menuchoice>.
    </para>
   </step>
   <step>
    <para>
     Enter a unique <literal>ID</literal> for the clone.
    </para>
   </step>
   <step>
    <para>
     Below <guimenu>Options</guimenu>, set the <guimenu>Initial state of
     resource</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Activate the respective options you want to set for your clone and
     click <guimenu>Forward</guimenu>.
    </para>
   </step>
   <step>
    <para>
     In the next step, you can either add a <guimenu>Primitive</guimenu> or
     a <guimenu>Group</guimenu> as sub-resources for the clone. These are
     created similar as described in
     <xref linkend="pro.ha.config.gui.primitives"/> or
     <xref
      linkend="pro.ha.config.gui.group"/>.
    </para>
   </step>
   <step>
    <para>
     If all parameters in the clone configuration dialog are set according
     to your wishes, click <guimenu>Apply</guimenu> to finish the
     configuration of the clone.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 id="sec.ha.configuration.migrate">
  <title>Migrating a Cluster Resource</title>

  <para>
   As mentioned in <xref linkend="sec.ha.configuration.failover"/>, the
   cluster will fail over (migrate) resources automatically in case of
   software or hardware failures&mdash;according to certain parameters you
   can define (for example, migration threshold or resource stickiness).
   Apart from that, you can also manually migrate a resource to another node
   in the cluster resources manually.
  </para>

  <procedure id="pro.ha.config.gui.migrate">
   <title>Manually Migrating Resources</title>
   <step>
    <para>
     Start the &hbgui; and log in to the cluster as described in
     <xref
      linkend="sec.ha.configuration.gui"/>.
    </para>
   </step>
   <step>
    <para>
     Switch to the <guimenu>Management</guimenu> view in the left pane, then
     right-click the respective resource in the right pane and select
     <guimenu>Migrate Resource</guimenu>.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="crmgui-main-migrate.png" width="70%" format="PNG"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="crmgui-main-migrate.png" width="70%" format="png"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
   </step>
   <step>
    <para>
     In the new window, select the node to which to move the resource to in
     <guimenu>To Node</guimenu>. This creates a location constraint with an
     <literal>INFINITY</literal> score for the destination node.
    </para>
   </step>
   <step>
    <para>
     If you want to migrate the resource only temporarily, activate
     <guimenu>Duration</guimenu> and enter the time frame for which the
     resource should migrate to the new node. After the expiration of the
     duration, the resource <emphasis>can</emphasis> move back to its
     original location or it may stay where it is (depending on resource
     stickiness).
    </para>
   </step>
   <step>
    <para>
     In cases where the resource cannot be migrated (if the resource's
     stickiness and constraint scores total more than
     <literal>INFINITY</literal> on the current node), activate the
     <guimenu>Force</guimenu> option. This forces the resource to move by
     creating a rule for the current location and a score of
     <literal>-INFINITY</literal>.
    </para>
    <note>
     <para>
      This prevents the resource from running on this node until the
      constraint is removed with <guimenu>Clear Migrate
      Constraints</guimenu> or the duration expires.
     </para>
    </note>
   </step>
   <step>
    <para>
     Click <guimenu>OK</guimenu> to confirm the migration.
    </para>
   </step>
  </procedure>

<?dbfo-need height="10em"?>

  <para> To allow the resource to move back again, switch to the
    <guimenu>Management</guimenu>, right-click the resource view and select
    <guimenu>Clear Migrate Constraints</guimenu>. This uses the
   <command>crm_resource&nbsp;-U</command> command. The resource
    <emphasis>can</emphasis> move back to its original location or it may stay
   where it is (depending on resource stickiness). For more information, see
    <xref linkend="man.crmresource"/> or <citetitle>Pacemaker
    1.0&mdash;Configuration Explained</citetitle>, available from <ulink
    url="http://clusterlabs.org/wiki/Documentation"/>. Refer to section
    <citetitle>Resource Migration</citetitle>. </para>
 </sect1>
 <sect1 id="sec.ha.configuration.more">
  <title>For More Information</title>

  <variablelist>
   <varlistentry>
    <term><ulink url="http://clusterlabs.org/"/>
    </term>
    <listitem>
     <para>
      Home page of Pacemaker, the cluster resource manager shipped with the
      &hasi;.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><ulink url="http://linux-ha.org"/>
    </term>
    <listitem>
     <para>
      Home page of the The High Availability Linux Project.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><ulink url=" http://clusterlabs.org/wiki/Documentation"/>
    </term>
    <listitem>
     <para>
      <citetitle>CRM Command Line Interface</citetitle> : Introduction to
      the <command>crm</command> command line tool.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><ulink url=" http://clusterlabs.org/wiki/Documentation"/>
    </term>
    <listitem>
     <para>
      <citetitle>Pacemaker 1.0&mdash;Configuration Explained</citetitle> : Explains the
      concepts used to conﬁgure Pacemaker. Contains comprehensive and very
      detailed information for reference.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</chapter>
<!--taroth 090406: differences between simple/expert/hack mode according
 to ygao, maybe this is useful to add for next release:
 
 Listed, FYI.
 
 1. Add resources
    1) Simple Mode (for general uses)
       * Add resources via "wizard"
    2) Expert Mode:
       * Prompt users to add a resource via either "wizard" or "dialog"
    3) Hack mode:
       * Same as "Expert Mode"
 
 2. "CRM Config"
    1) Simple Mode (for general uses)
       * List all supported cluster_properties with their _current_ or
 _default_ values in "CRM Config". View and change.
    2) Expert Mode:
       * Actual presentation of CIB's "cluster_property". Defaults are
 defaulted.
    3) Hack mode:
       * Same as "Expert Mode", and support multiple "Cluster Property"
 sets
 
 3. Sub-objects tabs
    1) Simple Mode (for general uses)
       * Always show the frequently-used sub-objects tabs for resources.
 No matter if those types of sub-objects exist in CIB. Hence we could
 directly add a type of sub-object in the presenting tab.
    2) Expert Mode:
       * Hide the corresponding tab if a particular type of sub-object
 doesn't explicitly exist in CIB. We will be prompted to select the type
 when adding a sub-object. Hence we could add all supported types of
 sub-objects.(We do not show all supported tabs for avoiding being
 confused by the less used types )
    3) Hack mode:
      * Same as "Expert Mode"
 
 4. Attributes set:
    1) Simple Mode (for general uses)
       * Single attributes set supported
    2) Expert Mode:
       * Single attributes set supported
    3) Hack mode
       * Multiple attribute sets supported
         We could work with additional sets of "Instance Attributes",
 "Meta Attributes" or "Cluster Property" with particular rules-->
